<?php

namespace DoctrineProxies\__CG__\Entity;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class MisUserTb extends \Entity\MisUserTb implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int) $this->_identifier["id"];
        }
        $this->__load();
        return parent::getId();
    }

    public function setUsername($username)
    {
        $this->__load();
        return parent::setUsername($username);
    }

    public function getUsername()
    {
        $this->__load();
        return parent::getUsername();
    }

    public function setPassword($password)
    {
        $this->__load();
        return parent::setPassword($password);
    }

    public function getPassword()
    {
        $this->__load();
        return parent::getPassword();
    }

    public function setEmail($email)
    {
        $this->__load();
        return parent::setEmail($email);
    }

    public function getEmail()
    {
        $this->__load();
        return parent::getEmail();
    }

    public function setMisRoleTb(\Entity\MisRoleTb $misRoleTb)
    {
        $this->__load();
        return parent::setMisRoleTb($misRoleTb);
    }

    public function getMisRoleTb()
    {
        $this->__load();
        return parent::getMisRoleTb();
    }

    public function setActivated($activated)
    {
        $this->__load();
        return parent::setActivated($activated);
    }

    public function getActivated()
    {
        $this->__load();
        return parent::getActivated();
    }

    public function setBanned($banned)
    {
        $this->__load();
        return parent::setBanned($banned);
    }

    public function getBanned()
    {
        $this->__load();
        return parent::getBanned();
    }

    public function setBanReason($banReason)
    {
        $this->__load();
        return parent::setBanReason($banReason);
    }

    public function getBanReason()
    {
        $this->__load();
        return parent::getBanReason();
    }

    public function setNewPasswordKey($newPasswordKey)
    {
        $this->__load();
        return parent::setNewPasswordKey($newPasswordKey);
    }

    public function getNewPasswordKey()
    {
        $this->__load();
        return parent::getNewPasswordKey();
    }

    public function setNewPasswordRequested($newPasswordRequested)
    {
        $this->__load();
        return parent::setNewPasswordRequested($newPasswordRequested);
    }

    public function getNewPasswordRequested()
    {
        $this->__load();
        return parent::getNewPasswordRequested();
    }

    public function setNewEmail($newEmail)
    {
        $this->__load();
        return parent::setNewEmail($newEmail);
    }

    public function getNewEmail()
    {
        $this->__load();
        return parent::getNewEmail();
    }

    public function setNewEmailKey($newEmailKey)
    {
        $this->__load();
        return parent::setNewEmailKey($newEmailKey);
    }

    public function getNewEmailKey()
    {
        $this->__load();
        return parent::getNewEmailKey();
    }

    public function setLastIp($lastIp)
    {
        $this->__load();
        return parent::setLastIp($lastIp);
    }

    public function getLastIp()
    {
        $this->__load();
        return parent::getLastIp();
    }

    public function setLastLogin($lastLogin)
    {
        $this->__load();
        return parent::setLastLogin($lastLogin);
    }

    public function getLastLogin()
    {
        $this->__load();
        return parent::getLastLogin();
    }

    public function setCreated($created)
    {
        $this->__load();
        return parent::setCreated($created);
    }

    public function getCreated()
    {
        $this->__load();
        return parent::getCreated();
    }

    public function setModified($modified)
    {
        $this->__load();
        return parent::setModified($modified);
    }

    public function getModified()
    {
        $this->__load();
        return parent::getModified();
    }

    public function setMisUserProfileTb(\Entity\MisUserProfileTb $misUserProfileTb)
    {
        $this->__load();
        return parent::setMisUserProfileTb($misUserProfileTb);
    }

    public function getMisUserProfileTb()
    {
        $this->__load();
        return parent::getMisUserProfileTb();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'username', 'password', 'email', 'activated', 'banned', 'banReason', 'newPasswordKey', 'newPasswordRequested', 'newEmail', 'newEmailKey', 'lastIp', 'lastLogin', 'created', 'modified', 'misUserProfileTb', 'misRoleTb');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields as $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}